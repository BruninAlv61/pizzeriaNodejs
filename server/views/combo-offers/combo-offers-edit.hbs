{{#contentFor "styles"}}
  <link rel='stylesheet' href='/css/manage-form.css' />
  <link rel="stylesheet" href="/css/product-modal.css" />
{{/contentFor}}

<main class="main">
  <article class="product-modal hidden">
    <section>
      <div class="close-container">
        <img class="close-modal" src="/assets/close.png" alt="close icon, click here to close the products modal">
      </div>
      <div class="products-container">
        {{#each menu}}
          <div class="product-item" data-id="{{product_id}}">
            <h4 class="product-name">{{product_name}}</h4>
            <div class="product-actions">
              <span class="product-quantity" id="quantity-{{product_id}}"></span>
              <button class="add-product-btn" id="{{product_id}}" data-name="{{product_name}}">
                <img src="/assets/plus.png" alt="add product">
              </button>
            </div>
          </div>
        {{/each}}
      </div>
    </section>
  </article>
  <h1 class="main-title">Editing "<span>{{combo_offer.combo_offers_name}}</span>"</h1>

  <form class="main-form" id="editForm">
    <input type="hidden" name="combo_offers_id" value="{{combo_offer.combo_offers_id}}" />

    <label for="combo_offers_name">Name</label>
    <input type="text" id="combo_offers_name" name="combo_offers_name" value="{{combo_offer.combo_offers_name}}" required />

    <label for="combo_offers_description">Description</label>
    <textarea id="combo_offers_description" name="description" required>{{combo_offer.description}}</textarea>

    <label for="combo_offers_price">Price</label>
    <input type="number" step="0.01" id="combo_offers_price" name="price" value="{{combo_offer.price}}" required />

    <label for="combo_offers_image">Image URL</label>
    <input type="url" id="combo_offers_image" name="combo_offers_image" value="{{combo_offer.combo_offers_image}}" required />

    <input type="hidden" name="products" id="products" value="" />

    <div id="product_list" class="product-tags">
      {{#each combo_offer.products}}
        <span class="product-tag">
        {{name}} x{{quantity}}
        </span>
      {{/each}}
    </div>

    <button type="button" id="add_product_btn">Edit Products</button>
    <button type="submit" class="form-btn">Save Changes</button>
  </form>
</main>

<script>
  const addBtn = document.getElementById('add_product_btn')
  const productList = document.getElementById('product_list')
  const productModal = document.querySelector('.product-modal')
  const closeModalBtn = document.querySelector('.close-modal')
  const addProductBtns = document.querySelectorAll('.add-product-btn')
  const productsContainer = document.querySelector('.products-container')
  const productsInput = document.getElementById('products')
  const editForm = document.getElementById('editForm')

  let products = []

  // Inicializar productos desde el servidor
  products = JSON.parse('{{{json combo_offer.products}}}'.replace(/&quot;/g, '"')).map(p => ({ id: p.product_id, name: p.name, quantity: p.quantity }))
  updateProductsInput()
  renderProducts()
  updateModalQuantities()

  console.log(products)

  addBtn.addEventListener('click', () => {
    productModal.classList.remove('hidden')
  })

  closeModalBtn.addEventListener('click', () => {
    productModal.classList.add('hidden')
  })

  // Adding product
  addProductBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.id
      const name = btn.dataset.name

      const existingProduct = products.find(p => p.id === id)
      if (existingProduct) {
        existingProduct.quantity += 1
      } else {
        products.push({ id, name, quantity: 1 })
      }
      updateProductsInput()
      renderProducts()
      updateModalQuantities()
    })
  })

  // Restar producto (delegado)
  productsContainer.addEventListener('click', (e) => {
    if (e.target.closest('.remove-product-btn')) {
      const id = e.target.closest('.remove-product-btn').dataset.id
      const product = products.find(p => p.id === id)

      if (product) {
        product.quantity -= 1
        if (product.quantity <= 0) {
          products = products.filter(p => p.id !== id)
        }
        updateProductsInput()
        renderProducts()
        updateModalQuantities()
      }
    }
  })

  function updateProductsInput() {
    productsInput.value = JSON.stringify(products.map(p => ({ id: p.id, quantity: p.quantity })))
  }

  function renderProducts() {
    productList.innerHTML = products.map(product => `
      <span class="product-tag">
        ${product.name} x${product.quantity}
      </span>
    `).join('')
  }

  function updateModalQuantities() {
    document.querySelectorAll('.product-item').forEach(item => {
      const id = item.dataset.id
      const product = products.find(p => p.id === id)
      const quantitySpan = item.querySelector(`#quantity-${id}`)
      const actions = item.querySelector('.product-actions')

      if (product) {
        quantitySpan.textContent = `x${product.quantity}`

        if (!actions.querySelector('.remove-product-btn')) {
          const removeBtn = document.createElement('button')
          removeBtn.classList.add('remove-product-btn')
          removeBtn.dataset.id = id
          removeBtn.innerHTML = `<img src="/assets/minus.png" alt="remove product">`
          actions.appendChild(removeBtn)
        }
      } else {
        quantitySpan.textContent = ''
        const existingBtn = actions.querySelector('.remove-product-btn')
        if (existingBtn) existingBtn.remove()
      }
    })
  }

  // Handle form with fetch
  editForm.addEventListener('submit', async (e) => {
    e.preventDefault()

    const combo_offers_id = document.querySelector('input[name="combo_offers_id"]').value
    const combo_offers_name = document.getElementById('combo_offers_name').value
    const description = document.getElementById('combo_offers_description').value
    const price = parseFloat(document.getElementById('combo_offers_price').value)
    const combo_offers_image = document.getElementById('combo_offers_image').value
    const products = JSON.parse(productsInput.value)

    try {
      const response = await fetch(`/combo-offers/${combo_offers_id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          combo_offers_id,
          combo_offers_name,
          description,
          price,
          combo_offers_image,
          products
        })
      })

      if (response.ok) {
        window.location.href = '/combo-offers'
      } else {
        const error = await response.text()
        alert('Error: ' + error)
      }
    } catch (err) {
      alert('Request failed')
    }
  })
</script>
