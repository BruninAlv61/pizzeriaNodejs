{{#contentFor 'styles'}}
  <link rel='stylesheet' href='/css/manage-form.css' />
  <link rel="stylesheet" href="/css/product-modal.css" />
{{/contentFor}}

<main class='main'>
  <!-- Product Modal -->
  <article class="product-modal hidden">
    <section>
      <div class="close-container">
        <img class="close-modal" src="/assets/close.png" alt="close icon, click here to close the products modal">
      </div>
      <h3>Products</h3>
      <div class="products-container">
        {{#each products}}
          <div class="product-item" data-id="{{product_id}}" data-type="product" data-price="{{product_price}}" data-name="{{product_name}}">
            <h4 class="product-name">{{product_name}} - ${{product_price}}</h4>
            <div class="product-actions">
              <span class="product-quantity" id="quantity-product-{{product_id}}"></span>
              <button class="add-item-btn" data-id="{{product_id}}" data-type="product" data-price="{{product_price}}" data-name="{{product_name}}">
                <img src="/assets/plus.png" alt="add product">
              </button>
            </div>
          </div>
        {{/each}}
      </div>
    </section>
  </article>

  <!-- Combo Modal -->
  <article class="combo-modal hidden">
    <section>
      <div class="close-container">
        <img class="close-combo-modal" src="/assets/close.png" alt="close icon, click here to close the combos modal">
      </div>
      <h3>Combo Offers</h3>
      <div class="combos-container">
        {{#each combos}}
          <div class="combo-item" data-id="{{combo_offers_id}}" data-type="combo" data-price="{{price}}" data-name="{{combo_offers_name}}">
            <h4 class="combo-name">{{combo_offers_name}} - ${{price}}</h4>
            <div class="combo-actions">
              <span class="combo-quantity" id="quantity-combo-{{combo_offers_id}}"></span>
              <button class="add-item-btn" data-id="{{combo_offers_id}}" data-type="combo" data-price="{{price}}" data-name="{{combo_offers_name}}">
                <img src="/assets/plus.png" alt="add combo">
              </button>
            </div>
          </div>
        {{/each}}
      </div>
    </section>
  </article>

  <h1 class='main-title'>Add New Physical Sale</h1>
  <form class='main-form' action='/physical-sales' method='post'>
    <div class="form-group">
      <label for='customer_type'>Customer Type</label>
      <select id='customer_type' name='customer_type'>
        <option value="walk-in">Walk-in Customer</option>
        <option value="registered">Registered Customer</option>
      </select>
    </div>
    
    <div id="registered_customer_fields">
      <label for='customer_id'>Customer</label>
      <select id='customer_id' name='customer_id'>
        <option value="">Select a customer</option>
        {{#each customers}}
          <option value="{{customer_id}}">{{name}} {{lastname}}</option>
        {{/each}}
      </select>
    </div>
    
    <div id="walk_in_customer_fields">
      <label for='customer_phone'>Customer Phone (optional)</label>
      <input type='text' id='customer_phone' name='customer_phone' placeholder="Enter customer phone number">
    </div>
    
    <label for='branch_id'>Branch</label>
    <select id='branch_id' name='branch_id' required>
      <option value="">Select a branch</option>
      {{#each branches}}
        <option value="{{branch_id}}">{{province}}, {{locality}} - {{address}}</option>
      {{/each}}
    </select>
    
    <label for='payment_method'>Payment Method</label>
    <select id='payment_method' name='payment_method' required>
      <option value="cash">Cash</option>
      <option value="credit_card">Credit Card</option>
      <option value="debit_card">Debit Card</option>
      <option value="transfer">Bank Transfer</option>
      <option value="other">Other</option>
    </select>

    <label for='total_price'>Total Price</label>
    <input type='number' step='0.01' id='total_price' name='total_price' readonly />
    
    <input type="hidden" name="items" id="items-input" value="">
    
    <div class="items-section">
      <label>Sale Items</label>
      <div id='items_list' class='items-tags'></div>
      <div class="add-items-buttons">
        <button type='button' id='add_product_btn'>Add Product</button>
        <button type='button' id='add_combo_btn'>Add Combo</button>
      </div>
    </div>
    
    <button type='submit'>Save Sale</button>
  </form>
</main>

<script>
  // DOM Elements
  const customerTypeSelect = document.getElementById('customer_type')
  const registeredCustomerFields = document.getElementById('registered_customer_fields')
  const walkInCustomerFields = document.getElementById('walk_in_customer_fields')
  const customerIdSelect = document.getElementById('customer_id')
  const customerPhoneInput = document.getElementById('customer_phone')
  
  const addProductBtn = document.getElementById('add_product_btn')
  const addComboBtn = document.getElementById('add_combo_btn')
  const itemsList = document.getElementById('items_list')
  const itemsInput = document.getElementById('items-input')
  const totalPriceInput = document.getElementById('total_price')
  
  const productModal = document.querySelector('.product-modal')
  const comboModal = document.querySelector('.combo-modal')
  const closeModalBtn = document.querySelector('.close-modal')
  const closeComboModalBtn = document.querySelector('.close-combo-modal')
  
  const productsContainer = document.querySelector('.products-container')
  const combosContainer = document.querySelector('.combos-container')
  
  // State
  let items = []
  
  // Initial setup
  function toggleCustomerFields() {
    if (customerTypeSelect.value === 'registered') {
      registeredCustomerFields.style.display = 'block'
      walkInCustomerFields.style.display = 'none'
      customerIdSelect.setAttribute('required', 'required')
      customerPhoneInput.removeAttribute('required')
    } else {
      registeredCustomerFields.style.display = 'none'
      walkInCustomerFields.style.display = 'block'
      customerIdSelect.removeAttribute('required')
      customerPhoneInput.removeAttribute('required')
    }
  }
  
  // Initialize fields visibility
  toggleCustomerFields()
  
  // Event Listeners
  customerTypeSelect.addEventListener('change', toggleCustomerFields)
  
  addProductBtn.addEventListener('click', () => {
    productModal.classList.remove('hidden')
  })
  
  addComboBtn.addEventListener('click', () => {
    comboModal.classList.remove('hidden')
  })
  
  closeModalBtn.addEventListener('click', () => {
    productModal.classList.add('hidden')
  })
  
  closeComboModalBtn.addEventListener('click', () => {
    comboModal.classList.add('hidden')
  })
  
  // Add Item (Product or Combo)
  document.querySelectorAll('.add-item-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.dataset.id
      const type = btn.dataset.type
      const price = parseFloat(btn.dataset.price)
      const name = btn.dataset.name
      
      const existingItem = items.find(item => item.id === id && item.type === type)
      
      if (existingItem) {
        existingItem.quantity += 1
        existingItem.totalPrice = existingItem.quantity * price
      } else {
        items.push({ 
          id, 
          type, 
          price, 
          name, 
          quantity: 1,
          totalPrice: price
        })
      }
      
      updateItemsInput()
      renderItems()
      updateQuantities()
      updateTotalPrice()
    })
  })
  
  // Remove Item (Event Delegation)
  productsContainer.addEventListener('click', (e) => {
    if (e.target.closest('.remove-item-btn')) {
      const btn = e.target.closest('.remove-item-btn')
      const id = btn.dataset.id
      const type = btn.dataset.type
      
      removeItem(id, type)
    }
  })
  
  combosContainer.addEventListener('click', (e) => {
    if (e.target.closest('.remove-item-btn')) {
      const btn = e.target.closest('.remove-item-btn')
      const id = btn.dataset.id
      const type = btn.dataset.type
      
      removeItem(id, type)
    }
  })
  
  // Functions
  function removeItem(id, type) {
    const item = items.find(item => item.id === id && item.type === type)
    
    if (item) {
      item.quantity -= 1
      item.totalPrice = item.quantity * item.price
      
      if (item.quantity <= 0) {
        items = items.filter(i => !(i.id === id && i.type === type))
      }
      
      updateItemsInput()
      renderItems()
      updateQuantities()
      updateTotalPrice()
    }
  }
  
  function updateItemsInput() {
    const formattedItems = items.map(item => ({
      id: item.id,
      type: item.type,
      quantity: item.quantity,
      price: item.price
    }))
    
    itemsInput.value = JSON.stringify(formattedItems)
  }
  
  function renderItems() {
    itemsList.innerHTML = items.map(item => `
      <span class="item-tag">
        ${item.name} x${item.quantity} - $${item.totalPrice.toFixed(2)}
      </span>
    `).join('')
  }
  
  function updateQuantities() {
    // Update product quantities
    document.querySelectorAll('.product-item').forEach(item => {
      const id = item.dataset.id
      const type = item.dataset.type
      const actions = item.querySelector('.product-actions')
      const quantitySpan = item.querySelector(`#quantity-product-${id}`)
      
      const productItem = items.find(i => i.id === id && i.type === type)
      
      if (productItem) {
        quantitySpan.textContent = `x${productItem.quantity}`
        
        if (!actions.querySelector('.remove-item-btn')) {
          const removeBtn = document.createElement('button')
          removeBtn.classList.add('remove-item-btn')
          removeBtn.dataset.id = id
          removeBtn.dataset.type = type
          removeBtn.innerHTML = `<img src="/assets/minus.png" alt="remove product">`
          actions.appendChild(removeBtn)
        }
      } else {
        quantitySpan.textContent = ''
        const existingBtn = actions.querySelector('.remove-item-btn')
        if (existingBtn) existingBtn.remove()
      }
    })
    
    // Update combo quantities
    document.querySelectorAll('.combo-item').forEach(item => {
      const id = item.dataset.id
      const type = item.dataset.type
      const actions = item.querySelector('.combo-actions')
      const quantitySpan = item.querySelector(`#quantity-combo-${id}`)
      
      const comboItem = items.find(i => i.id === id && i.type === type)
      
      if (comboItem) {
        quantitySpan.textContent = `x${comboItem.quantity}`
        
        if (!actions.querySelector('.remove-item-btn')) {
          const removeBtn = document.createElement('button')
          removeBtn.classList.add('remove-item-btn')
          removeBtn.dataset.id = id
          removeBtn.dataset.type = type
          removeBtn.innerHTML = `<img src="/assets/minus.png" alt="remove combo">`
          actions.appendChild(removeBtn)
        }
      } else {
        quantitySpan.textContent = ''
        const existingBtn = actions.querySelector('.remove-item-btn')
        if (existingBtn) existingBtn.remove()
      }
    })
  }
  
  function updateTotalPrice() {
    const total = items.reduce((sum, item) => sum + item.totalPrice, 0)
    totalPriceInput.value = total.toFixed(2)
  }
  
  // Form submission
  document.querySelector('.main-form').addEventListener('submit', function(e) {
    // Ensure we pass the right customer data based on type
    if (customerTypeSelect.value === 'walk-in') {
      customerIdSelect.value = ''; // Clear customer ID if it's a walk-in
    } else {
      customerPhoneInput.value = ''; // Clear phone if it's a registered customer
    }
    
    // Validate at least one item is added
    if (items.length === 0) {
      e.preventDefault();
      alert('Please add at least one product or combo to the sale');
    }
  });
</script>