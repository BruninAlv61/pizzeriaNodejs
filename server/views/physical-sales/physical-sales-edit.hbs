{{#contentFor 'styles'}}
  <link rel='stylesheet' href='/css/manage-form.css' />
  <link rel="stylesheet" href="/css/product-modal.css" />
{{/contentFor}}

<main class='main'>
  <!-- Product Modal -->
  <article class="product-modal hidden">
    <section>
      <div class="close-container">
        <img class="close-modal" src="/assets/close.png" alt="close icon, click here to close the products modal">
      </div>
      <h3>Products</h3>
      <div class="products-container">
        {{#each products}}
          <div class="product-item" data-id="{{product_id}}" data-type="product" data-price="{{product_price}}" data-name="{{product_name}}">
            <h4 class="product-name">{{product_name}} - ${{product_price}}</h4>
            <div class="product-actions">
              <span class="product-quantity" id="quantity-product-{{product_id}}"></span>
              <button class="add-item-btn" data-id="{{product_id}}" data-type="product" data-price="{{product_price}}" data-name="{{product_name}}">
                <img src="/assets/plus.png" alt="add product">
              </button>
            </div>
          </div>
        {{/each}}
      </div>
    </section>
  </article>

  <!-- Combo Modal -->
  <article class="combo-modal hidden">
    <section>
      <div class="close-container">
        <img class="close-combo-modal" src="/assets/close.png" alt="close icon, click here to close the combos modal">
      </div>
      <h3>Combo Offers</h3>
      <div class="combos-container">
        {{#each combos}}
          <div class="combo-item" data-id="{{combo_offers_id}}" data-type="combo" data-price="{{price}}" data-name="{{combo_offers_name}}">
            <h4 class="combo-name">{{combo_offers_name}} - ${{price}}</h4>
            <div class="combo-actions">
              <span class="combo-quantity" id="quantity-combo-{{combo_offers_id}}"></span>
              <button class="add-item-btn" data-id="{{combo_offers_id}}" data-type="combo" data-price="{{price}}" data-name="{{combo_offers_name}}">
                <img src="/assets/plus.png" alt="add combo">
              </button>
            </div>
          </div>
        {{/each}}
      </div>
    </section>
  </article>

  <h1 class='main-title'>Edit Physical Sale</h1>
  <form class='main-form' id='physicalSaleForm'>
    <div class="form-group">
      <label for='customer_type'>Customer Type</label>
      <select id='customer_type' name='customer_type'>
        <option value="walk-in" {{#if (not sale.customer_id)}}selected{{/if}}>Walk-in Customer</option>
        <option value="registered" {{#if sale.customer_id}}selected{{/if}}>Registered Customer</option>
      </select>
    </div>
    
    <div id="registered_customer_fields">
      <label for='customer_id'>Customer</label>
      <select id='customer_id' name='customer_id'>
        <option value="">Select a customer</option>
        {{#each customers}}
          <option value="{{customer_id}}" {{#if (eq ../sale.customer_id customer_id)}}selected{{/if}}>
            {{name}} {{lastname}}
          </option>
        {{/each}}
      </select>
    </div>
    
    <div id="walk_in_customer_fields">
      <label for='customer_phone'>Customer Phone (optional)</label>
      <input type='text' id='customer_phone' name='customer_phone' value="{{sale.customer_phone}}" placeholder="Enter customer phone number">
    </div>
    
    <label for='branch_id'>Branch</label>
    <select id='branch_id' name='branch_id' required>
      <option value="">Select a branch</option>
      {{#each branches}}
        <option value="{{branch_id}}" {{#if (eq ../sale.branch_id branch_id)}}selected{{/if}}>
          {{province}}, {{locality}} - {{address}}
        </option>
      {{/each}}
    </select>
    
    <label for='payment_method'>Payment Method</label>
    <select id='payment_method' name='payment_method' required>
      <option value="cash" {{#if (eq sale.payment_method "cash")}}selected{{/if}}>Cash</option>
      <option value="credit_card" {{#if (eq sale.payment_method "credit_card")}}selected{{/if}}>Credit Card</option>
      <option value="debit_card" {{#if (eq sale.payment_method "debit_card")}}selected{{/if}}>Debit Card</option>
      <option value="transfer" {{#if (eq sale.payment_method "transfer")}}selected{{/if}}>Bank Transfer</option>
      <option value="other" {{#if (eq sale.payment_method "other")}}selected{{/if}}>Other</option>
    </select>

    <label for='total_price'>Total Price</label>
    <input type='number' step='0.01' id='total_price' name='total_price' value="{{sale.total_price}}" readonly />
    
    <input type="hidden" name="items" id="items-input" value="">
    
    <div class="items-section">
      <label>Sale Items</label>
      <div id='items_list' class='items-tags'></div>
      <div class="add-items-buttons">
        <button type='button' id='add_product_btn'>Add Product</button>
        <button type='button' id='add_combo_btn'>Add Combo</button>
      </div>
    </div>
    
    <button type='button' id='updateSaleBtn'>Update Sale</button>
    <div id="result-message"></div>
  </form>
</main>

<script>
  // DOM Elements
  const customerTypeSelect = document.getElementById('customer_type')
  const registeredCustomerFields = document.getElementById('registered_customer_fields')
  const walkInCustomerFields = document.getElementById('walk_in_customer_fields')
  const customerIdSelect = document.getElementById('customer_id')
  const customerPhoneInput = document.getElementById('customer_phone')
  
  const addProductBtn = document.getElementById('add_product_btn')
  const addComboBtn = document.getElementById('add_combo_btn')
  const itemsList = document.getElementById('items_list')
  const itemsInput = document.getElementById('items-input')
  const totalPriceInput = document.getElementById('total_price')
  const updateSaleBtn = document.getElementById('updateSaleBtn')
  const resultMessage = document.getElementById('result-message')
  const physicalSaleForm = document.getElementById('physicalSaleForm')
  
  const productModal = document.querySelector('.product-modal')
  const comboModal = document.querySelector('.combo-modal')
  const closeModalBtn = document.querySelector('.close-modal')
  const closeComboModalBtn = document.querySelector('.close-combo-modal')
  
  const productsContainer = document.querySelector('.products-container')
  const combosContainer = document.querySelector('.combos-container')
  
  // State
  let items = []
  
  // Toggle customer fields based on customer type
  function toggleCustomerFields() {
    if (customerTypeSelect.value === 'registered') {
      registeredCustomerFields.style.display = 'block'
      walkInCustomerFields.style.display = 'none'
      customerIdSelect.setAttribute('required', 'required')
      customerPhoneInput.removeAttribute('required')
    } else {
      registeredCustomerFields.style.display = 'none'
      walkInCustomerFields.style.display = 'block'
      customerIdSelect.removeAttribute('required')
      customerPhoneInput.removeAttribute('required')
    }
  }
  
  // Initialize fields visibility
  toggleCustomerFields()
  
  // Customer type change handler
  customerTypeSelect.addEventListener('change', toggleCustomerFields)
  
  // Load existing items
  function loadExistingItems() {
    // Convert from sale.items format to our format
    {{#if sale.items}}
      {{#each sale.items}}
        items.push({
          id: '{{#if product_id}}{{product_id}}{{else}}{{combo_offers_id}}{{/if}}',
          type: '{{#if product_id}}product{{else}}combo{{/if}}',
          price: {{price}},
          name: '{{name}}',
          quantity: {{quantity}},
          totalPrice: {{price}} * {{quantity}}
        })
      {{/each}}
    {{/if}}
    
    updateItemsInput()
    renderItems()
    updateQuantities()
    updateTotalPrice()
  }
  
  // Run on page load
  document.addEventListener('DOMContentLoaded', loadExistingItems)
  
  // Event Listeners
  addProductBtn.addEventListener('click', () => {
    productModal.classList.remove('hidden')
  })
  
  addComboBtn.addEventListener('click', () => {
    comboModal.classList.remove('hidden')
  })
  
  closeModalBtn.addEventListener('click', () => {
    productModal.classList.add('hidden')
  })
  
  closeComboModalBtn.addEventListener('click', () => {
    comboModal.classList.add('hidden')
  })
  
  // Add Item (Product or Combo)
  document.querySelectorAll('.add-item-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.dataset.id
      const type = btn.dataset.type
      const price = parseFloat(btn.dataset.price)
      const name = btn.dataset.name
      
      const existingItem = items.find(item => item.id === id && item.type === type)
      
      if (existingItem) {
        existingItem.quantity += 1
        existingItem.totalPrice = existingItem.quantity * price
      } else {
        items.push({ 
          id, 
          type, 
          price, 
          name, 
          quantity: 1,
          totalPrice: price
        })
      }
      
      updateItemsInput()
      renderItems()
      updateQuantities()
      updateTotalPrice()
    })
  })
  
  // Remove Item (Event Delegation) - Only from modals
  productsContainer.addEventListener('click', (e) => {
    if (e.target.closest('.remove-item-btn')) {
      const btn = e.target.closest('.remove-item-btn')
      const id = btn.dataset.id
      const type = btn.dataset.type
      
      removeItem(id, type)
    }
  })
  
  combosContainer.addEventListener('click', (e) => {
    if (e.target.closest('.remove-item-btn')) {
      const btn = e.target.closest('.remove-item-btn')
      const id = btn.dataset.id
      const type = btn.dataset.type
      
      removeItem(id, type)
    }
  })
  
  // Functions
  function removeItem(id, type) {
    const item = items.find(item => item.id === id && item.type === type)
    
    if (item) {
      item.quantity -= 1
      item.totalPrice = item.quantity * item.price
      
      if (item.quantity <= 0) {
        items = items.filter(i => !(i.id === id && i.type === type))
      }
      
      updateItemsInput()
      renderItems()
      updateQuantities()
      updateTotalPrice()
    }
  }
  
  function updateItemsInput() {
    const formattedItems = items.map(item => ({
      id: item.id,
      type: item.type,
      quantity: item.quantity,
      price: item.price
    }))
    
    itemsInput.value = JSON.stringify(formattedItems)
  }
  
  function renderItems() {
    // Render items as read-only tags (no removal from tags)
    itemsList.innerHTML = items.map(item => `
      <span class="item-tag">
        ${item.name} x${item.quantity} - $${item.totalPrice.toFixed(2)}
      </span>
    `).join('')
  }
  
  function updateQuantities() {
    // Update product quantities
    document.querySelectorAll('.product-item').forEach(item => {
      const id = item.dataset.id
      const type = item.dataset.type
      const actions = item.querySelector('.product-actions')
      const quantitySpan = item.querySelector(`#quantity-product-${id}`)
      
      const productItem = items.find(i => i.id === id && i.type === type)
      
      if (productItem) {
        quantitySpan.textContent = `x${productItem.quantity}`
        
        if (!actions.querySelector('.remove-item-btn')) {
          const removeBtn = document.createElement('button')
          removeBtn.classList.add('remove-item-btn')
          removeBtn.dataset.id = id
          removeBtn.dataset.type = type
          removeBtn.innerHTML = `<img src="/assets/minus.png" alt="remove product">`
          actions.appendChild(removeBtn)
        }
      } else {
        quantitySpan.textContent = ''
        const existingBtn = actions.querySelector('.remove-item-btn')
        if (existingBtn) existingBtn.remove()
      }
    })
    
    // Update combo quantities
    document.querySelectorAll('.combo-item').forEach(item => {
      const id = item.dataset.id
      const type = item.dataset.type
      const actions = item.querySelector('.combo-actions')
      const quantitySpan = item.querySelector(`#quantity-combo-${id}`)
      
      const comboItem = items.find(i => i.id === id && i.type === type)
      
      if (comboItem) {
        quantitySpan.textContent = `x${comboItem.quantity}`
        
        if (!actions.querySelector('.remove-item-btn')) {
          const removeBtn = document.createElement('button')
          removeBtn.classList.add('remove-item-btn')
          removeBtn.dataset.id = id
          removeBtn.dataset.type = type
          removeBtn.innerHTML = `<img src="/assets/minus.png" alt="remove combo">`
          actions.appendChild(removeBtn)
        }
      } else {
        quantitySpan.textContent = ''
        const existingBtn = actions.querySelector('.remove-item-btn')
        if (existingBtn) existingBtn.remove()
      }
    })
  }
  
  function updateTotalPrice() {
    const total = items.reduce((sum, item) => sum + item.totalPrice, 0)
    totalPriceInput.value = total.toFixed(2)
  }

  // Handle form submission with fetch PATCH request
  updateSaleBtn.addEventListener('click', async (e) => {
    e.preventDefault()
    
    // Get the physical sale ID from the URL
    const saleId = window.location.pathname.split('/').pop()
    
    // Ensure we pass the right customer data based on type
    if (customerTypeSelect.value === 'walk-in') {
      customerIdSelect.value = null; // Set customer ID to null if it's a walk-in
      
      // If no phone provided, explicitly set to null
      if (!customerPhoneInput.value || customerPhoneInput.value.trim() === '') {
        customerPhoneInput.value = null;
      }
    } else {
      // For registered customers
      customerPhoneInput.value = null; // Clear phone if it's a registered customer
      
      // Make sure a customer is selected
      if (!customerIdSelect.value) {
        resultMessage.textContent = 'Please select a customer';
        resultMessage.style.color = 'red';
        return;
      }
    }
    
    // Validate at least one item is added
    if (items.length === 0) {
      resultMessage.textContent = 'Please add at least one product or combo to the sale';
      resultMessage.style.color = 'red';
      return;
    }
    
    // Format the form data to match controller expectations
    const formData = new FormData(physicalSaleForm)
    
    // Explicitly add the items as a JSON string
    formData.set('items', itemsInput.value)
    
    // Convert FormData to an object
    const requestData = Object.fromEntries(formData.entries())
    
    console.log('Sending data:', JSON.stringify(requestData, null, 2))
    console.log('Sale ID:', saleId)
    
    try {
      resultMessage.textContent = 'Updating sale...'
      resultMessage.style.color = 'blue'
      
      const response = await fetch(`/physical-sales/${saleId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json, text/html'
        },
        body: JSON.stringify(requestData)
      })
      
      console.log('Response status:', response.status)
      console.log('Response type:', response.headers.get('content-type'))
      
      // If the server responds with a redirect, follow it
      if (response.redirected || response.status === 302 || response.status === 301) {
        console.log('Redirect detected to:', response.url)
        window.location.href = response.url || '/physical-sales'
        return
      }
      
      // Check for HTML response (sometimes error pages return HTML)
      const contentType = response.headers.get('content-type')
      if (contentType && contentType.includes('text/html')) {
        console.log('HTML response received - likely an error page')
        // Update was likely successful but we got HTML back
        window.location.href = '/physical-sales'
        return
      }
      
      // Normal JSON handling
      if (!response.ok) {
        const text = await response.text()
        console.log('Error response text:', text)
        
        try {
          // Try to parse as JSON
          const errorData = JSON.parse(text)
          if (errorData.errors) {
            const errorMessage = errorData.errors.map(err => `${err.field}: ${err.message}`).join('\n')
            throw new Error(errorMessage)
          } else {
            throw new Error(errorData.error || 'Unknown error')
          }
        } catch (jsonError) {
          // If not valid JSON, use text or status
          throw new Error(`Error: ${text || response.statusText}`)
        }
      }
      
      // Try to parse response as JSON (for API-style responses)
      try {
        const result = await response.json()
        console.log('Success response:', result)
      } catch (e) {
        // Not JSON, but that's okay if status was successful
        console.log('Response was not JSON but status is ok')
      }
      
      // Success handling
      resultMessage.textContent = 'Sale updated successfully!'
      resultMessage.style.color = 'green'
      
      // Redirect after success
      setTimeout(() => {
        window.location.href = '/physical-sales'
      }, 1000)
      
    } catch (error) {
      resultMessage.textContent = `Error: ${error.message}`
      resultMessage.style.color = 'red'
      console.error('Update error:', error)
    }
  })
</script>